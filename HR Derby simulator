using System.Globalization;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Security.AccessControl;
using System.Collections;
using System.Collections.Generic;

namespace Final_Project__Home_run_derby_game;




        

   




class Program
{

        class Batter{
            public string name;
            public double power;
            public double contact;
            public double leftTendency;
            public double rightTendency;

        public Batter(string name, double power, double contact, double leftTendency, double rightTendency)
        {
            this.name = name;
            this.power = power;
            this.contact = contact;
            this.leftTendency = leftTendency;
            this.rightTendency = rightTendency;
        }
        }
    static void Main(string[] args){        
        ArrayList batters = new ArrayList();
        
            batters.Add
            (new Batter ("Aaron Judge", 95, 55, 33, 33));
            batters.Add
            (new Batter ("Mike Trout", 75, 75, 66, 1));
            batters.Add
            (new Batter ("Vladimir Guerrero Jr.", 90, 60, 60, 5));
            batters.Add
            (new Batter ("Shohei Ohtani",70, 80, 15, 50));
            batters.Add
            (new Batter ("Bryce Harper", 65, 85, 30, 65 ));
                
       
        
    

       bool gameOver=false;
       /*double batterSelectionPower;
       double batterSelectionContact;
       double batterSelectionLTendency;
       double batterSelectionRTendency;*/
       

//main game loop       
while (!gameOver){
//startup menu
        Console.WriteLine("Welcome to the home run derby!");
        Console.WriteLine("Select a Batter or use 'add' to create your own batter!");
foreach (Batter batter in batters){
Console.WriteLine (@$"{batter.name}  
Power: {batter.power}
Contact: {batter.contact}");
Console.WriteLine(" ");}

//accepting user input here
int index=0;
string input = Console.ReadLine();
if (input.ToLower() == "add"){
 Console.WriteLine("Enter a custom batter in the format 'name,power,contact,Ltendency,Rtendency', or enter 'back' to return to the main menu:");
            input = Console.ReadLine().Trim();

            if (input == "back"||input=="BACK")
            {
                continue;
            }

            string[] parts = input.Split(',');
            if (parts.Length != 5)
            {
                Console.WriteLine("Invalid input: must be in the format 'name, power, contact, Ltendency, Rtendency'");
                Console.WriteLine(" ");
                //The user will be returned to the main menu
                continue;
            }

            string name = parts[0];
            if (double.TryParse(parts[1], out double power) && double.TryParse(parts[2], out double contact)&& double.TryParse(parts[3], out double leftTendency) && double.TryParse(parts[4], out double rightTendency))
            {
                if (power >= 1.0 && power <= 99.0 && contact >= 1.0 && contact <= 99.0 && leftTendency+rightTendency>= 1.0 && leftTendency+rightTendency<= 99.0)
                {
                    batters.Add(new Batter(name, power, contact, leftTendency, rightTendency));
                }
                else
                {  Console.WriteLine("Invalid input: power, contact, and tendencies must be between 1 and 99");
                    continue;
                }
            }
            else
            {
                Console.WriteLine("Invalid input: power and contact must be numeric values");
                continue;
            }

        // Print out the contents of the list
        Console.WriteLine("The list now contains:");
        foreach (Batter batter in batters){
        
            Console.WriteLine($"{batter.name}: power= {batter.power}, contact= {batter.contact}");
        }
        continue;
}
        else if (!int.TryParse(input, out index)) {
        Console.WriteLine("Invalid selection. Please enter a number or 'add'.");
        continue;
    }
else if(index >= 0 && index < batters.Count+1){
index= int.Parse(input)-1;

}

else{
    Console.WriteLine("invalid selection");
    continue;
}


Batter selectedBatter = (Batter)batters[index];
string batterSelectionName=selectedBatter.name;
double batterSelectionPower=selectedBatter.power;
double batterSelectionContact=selectedBatter.contact;
double batterSelectionLTendency=selectedBatter.leftTendency;
double batterSelectionRTendency=selectedBatter.rightTendency;
Console.WriteLine(" ");





//Displaying the user's batter choice
Console.WriteLine($"Player Selected: {batterSelectionName.ToString()}");
Console.WriteLine(" ");

//Console.WriteLine(batterSelectionPower.ToString());
//Console.WriteLine(batterSelectionContact.ToString());


//Now we're creating random number generators for power and contact that will vary depending on difficulty.
//We are also creating random number generators to determine direction
byte outCounter=0;
double maxDistance=0;
double homeRunCounter=0;
double swingCount=0;

Console.WriteLine(@"Please select your desired difficulty level
1= easy
2= medium
3= hard");

double userDifficulty=0;
string selectedDifficulty= 
Console.ReadLine().Trim();

switch(selectedDifficulty){
case "1":{
    userDifficulty=0.75;
    Console.WriteLine("You have selected easy.");
    break;
}
case "2":{
    userDifficulty=1;
    Console.WriteLine("You have selected medium.");
    break;
}
case "3":{
    userDifficulty=1.25;
    Console.WriteLine("You have selected hard. Good luck with that buddy.");
    break;
}
default: {
    userDifficulty=0.75;
    Console.WriteLine("Alright well since you can't follow basic instructions, we're just going to default the difficulty to EASY.");
    break;
}
}

Console.WriteLine(" ");
Console.WriteLine(@$"Welcome to Rogers Center in Toronto. It's a great day for some baseball. {batterSelectionName.ToString()}
steps up to the plate, settles into the box, and you know he's looking to do some damage.");




while(outCounter<3){

Random random = new Random();

double contactGenerator = (random.Next(3,11)/userDifficulty);
double powerGenerator = (random.Next(3, 8)/userDifficulty);
int directionLGenerator = random.Next(1, 11);
int directionRGenerator = random.Next(1, 11);
bool contactMade;

double contactOdds= (batterSelectionContact*contactGenerator);;

//These dimensions are actually based on Rogers Center new dimensions

int fenceDistanceL= 329;
int fenceDistanceC= 400;
int fenceDistanceR= 328;
int fenceDistance;

double directionLOdds= batterSelectionLTendency*directionLGenerator;
double directionROdds= batterSelectionRTendency*directionRGenerator;


Console.WriteLine(" ");
Console.WriteLine("Press any key to swing");
string swingOption=Console.ReadLine().Trim();

if (swingOption!=null){
    swingCount++;


if (directionLOdds>=165 && directionROdds<165){
    fenceDistance=fenceDistanceL;
}
else if (directionROdds>=165 && directionLOdds<165){
    fenceDistance=fenceDistanceR;
}
else if (directionLOdds>=165 && directionROdds>=165){
    if(directionLOdds>directionROdds){
        fenceDistance=fenceDistanceL;
    }
    else if(directionLOdds<directionROdds){
        fenceDistance=fenceDistanceR;
    }
    else{
        fenceDistance=fenceDistanceC;
    }
}
else{
    fenceDistance=fenceDistanceC;
}


    //Console.WriteLine($"{batterSelectionContact}x{contactGenerator}={contactOdds}");
if (contactOdds>350){
    contactMade= true;
    Console.WriteLine(" ");
    Console.Write("Swung on and drilled ");
    if(fenceDistance==fenceDistanceC){
        Console.WriteLine("to center field...");
    }
    if(fenceDistance==fenceDistanceL){
        Console.WriteLine("to left field...");
    }
    if(fenceDistance==fenceDistanceR){
        Console.WriteLine("to right field...");
    }
}
else {
    contactMade= false;
    Console.WriteLine(" ");
    Console.WriteLine("Swung on and missed. He cannot be happy about that one.");
    outCounter++;
    Console.WriteLine($"That is out number {outCounter.ToString()}.");
    Console.WriteLine($"Score: {homeRunCounter.ToString()}");
    Console.WriteLine(" ");
}



if(contactMade==true){
double powerOdds = (batterSelectionPower*powerGenerator);
//Console.WriteLine($"{batterSelectionPower}x{powerGenerator}={powerOdds}");
if (powerOdds>fenceDistance){
    homeRunCounter++;
    Console.WriteLine("AND IT IS OUT OF HERE!");
    Console.WriteLine($"That went {Math.Round(powerOdds, 2)} feet!");
        if(powerOdds>450 && powerOdds<550){
            Console.WriteLine("Wow! That was an absolute nuke!");
        }
        if(powerOdds>550){
            Console.WriteLine("I don't think that's humanly possible. You might have a random drug test coming your way.");
        }
    Console.WriteLine(" ");    
    Console.WriteLine($"Score: {homeRunCounter.ToString()}");
    if(outCounter==1){
        Console.WriteLine($"And there is still only {outCounter.ToString()} out.");}
    else{
        Console.WriteLine($"And there are still {outCounter.ToString()} outs.");}
    Console.WriteLine(" ");
        if(powerOdds>maxDistance){
            maxDistance=powerOdds;
        }       
}
else if(powerOdds<fenceDistance){
    Console.WriteLine("... and it dies out before the wall. That's an out.");
    outCounter++;
    Console.WriteLine($"That is out number {outCounter.ToString()}.");
    Console.WriteLine($"Score: {homeRunCounter.ToString()}");
}
}
}
}



if (outCounter>=3){

Console.WriteLine(" ");
Console.WriteLine("Game over!");
Console.WriteLine(@$"Your score = {homeRunCounter.ToString()}
Batting average = {Math.Round(homeRunCounter/swingCount, 3)}
Longest home run= {Math.Round(maxDistance, 2)} feet!");
Console.WriteLine(" ");
}


Console.WriteLine("Press Y to play again or any other key to exit.");
Console.WriteLine(" ");
string playAgain= Console.ReadLine().ToLower().Trim();
if (playAgain != "y"){
    Console.WriteLine("Thanks for playing. Goodbye!");
    break;
}
}
    }
}
